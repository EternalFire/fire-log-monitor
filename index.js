"use strict";

module.exports = main;

const os = require("os");
const fs = require("fs");
const dns = require("dns");
const path = require("path");
const childProcess = require("child_process");
const constants = require("./Constants");

// client records
let clients = {};
function clientsLength() {
  return Object.keys(clients).length;
}

function addClient(id) {
  clients[id] = {};
}

function delClient(id) {
  delete clients[id];
}

let clientRooms = [];

// !! start !!
function main() {
  dns.lookup(os.hostname(), (err, address, family) => {
    console.log("IP address: %j family: IPv%s", address, family);

    writeConfig(address, constants.SERVER_PORT);
    useIO();
    useHttpServer(address);
  });
}

function writeConfig(ipAddress, logServerPort) {
  const logServer = `ws://${ipAddress}:${logServerPort}`;
  const socketIOScript = "https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js";

  const clientConfig = { logServer, socketIOScript };
  let clientConfigStr =
`
// Generated by server.
var FireLoggerConfig = ${JSON.stringify(clientConfig, null, 2)};
`;

  let writeStream = fs.createWriteStream(path.join("firelogger", "config.js"));
  writeStream.end(clientConfigStr);
}

// http server
function useHttpServer(ipAddress) {
  const express = require("express");
  const app = express();
  const server = require("http").createServer(app);
  const port = 3030;

  server.listen(port, function () {
    let object = server.address();
    // console.log(os.networkInterfaces());
    // console.log(os.hostname());
    // console.log(server.localAddress);

    let url = `http://${ipAddress}:${object.port}`;
    console.log(`Http Server listening at ${url}`);

    openBrowser(url);
  });

  // Routing
  app.use(express.static(__dirname));
  app.use("/", function(req, res) {
    res.sendFile(__dirname + "/simple-monitor/index.html");
  });
}

function generateCmd(url) {
  let cmd = "";
  console.log(`process.platform = [${process.platform}]`);

  switch (process.platform) {
    case "win32":
      cmd = "start";
      break;
    case "linux":
      cmd = "xdg-open";
      break;
    case "darwin":
      cmd = "open";
      break;
  }

  cmd = `${cmd} ${url}`;
  return cmd
}

function openBrowser(url) {
  let cmd = generateCmd(url);
  console.log(`cmd = ${cmd}`);
  childProcess.exec(`${cmd}`);
}

function useIO() {
  var io = require("socket.io").listen(constants.SERVER_PORT);
  io.on("connection", function (socket) {

    socket.on("error", handleError);

    socket.on("disconnect", function() {
      let socketID = socket.id;
      delClient(socketID);

      let message = `client socketID=[${socketID}] disconnect! Total client: [${clientsLength()}]`;
      console.log(message);

      broadcastMessage(socket, message, false)
    });

    // if (clientsLength() > 1) {
    //   console.log("full client!", socket.id, clientsLength());
    //   socket.disconnect(true);
    //   return;
    // }

    helloClient(socket);

    // let lastData;
    socket.on("message", function(data) {
      // if (lastData == data) return;
      // lastData = data;
      // console.log(data);
      broadcastMessage(socket, data, false);
    });

    // for room
    let selfRoom = io.of(socket.id);
    selfRoom.on("connection", function(roomSocket) {
      roomSocket.on("private message", function(socketID, data) {
        handlePrivateMessage(roomSocket, roomSocket.id, data);
      });
    });

    socket.on("create room", function(roomName) {
      let room = io.of(roomName);

      socket.emit("create room success", roomName);
      socket.broadcast.emit("create room success", roomName);

      room.on("connection", function(roomSocket) {

        console.log(`${roomSocket.id} is in room`);

        roomSocket.on("message", function(data) {
          broadcastMessage(roomSocket, data, false);
        });
      });

      console.log(`create room [${roomName}]`);

      clientRooms.push(roomName);
    });

    socket.on("commander", (commandFlag, type, jsonData) => {
      socket.broadcast.emit("commander", commandFlag, type, jsonData);
        console.log("commandFlag: ", commandFlag);
        console.log("type: ",type);
        console.log("data: ", jsonData);
    });


    // socket.on(constants.EVENT_REQUEST_FILE, function(){
    //   handleRequestFile(socket, "demo.txt")
    // })
  });

  console.log("log server ready!");
}


// handlers
// function handleRequestFile(socket, path) {
//   fs.readFile("demo.txt", "utf8", function (err, data) {
//     if (err) {
//       return console.error(err);
//     }
//     else {
//       socket.emit(constants.EVENT_SEND_FILE, data);
//     }
//   });
// }

function handleError(error) {
  console.log("handleError: ");
  console.log(error);
}

function helloClient(socket) {
  let socketID = socket.id;
  console.log(`${socketID} connected!`);

  // record client
  addClient(socketID);

  let welcomeMessage = `Welcome ${socketID} ! Total client: [${clientsLength()}]`;
  broadcastMessage(socket, welcomeMessage, true);

  // notice room name
  clientRooms.forEach(function(name) {
    socket.emit("create room success", name);
  });
}

/**
 * broadcast message
 * @param {Socket} socket
 * @param {String} message
 * @param {Boolean} toSender if true, broadcast to the sender
 */
function broadcastMessage(socket, message, toSender) {
  if (toSender) {
    socket.emit("message", message);
  }
  socket.broadcast.emit("message", message);
}

function handlePrivateMessage(socket, socketID, message) {
  let logMessage = `handlePrivateMessage ${socketID} : ${message}`;
  console.log(logMessage);
  socket.emit("private message", socketID, message);
}